{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Architechture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# number of nodes per hidden layer\n",
    "n_nodes_hl1 = 500\n",
    "n_nodes_hl2 = 500\n",
    "n_nodes_hl3 = 500\n",
    "\n",
    "# number of classes \n",
    "n_classes = 10\n",
    "#choose how many images to be fed per epoch\n",
    "batch_size = 100\n",
    "\n",
    "# height x width\n",
    "# by leaving the the extra [None, 784] parameter tensor flow will throw an \n",
    "# error if you attempt to feed a shape that is different from intended shape\n",
    "x = tf.placeholder('float', [None,784]) #flatten 28 by 28\n",
    "y = tf.placeholder('float')\n",
    "\n",
    "def neural_network_model(data):\n",
    "    #two values, weights are variables initialized with random normals\n",
    "    #   biases,\n",
    "    # (input_data * weights) + bias, if no input_data allows for activation\n",
    "    hidden_1_layer = {'weights':tf.Variable(\\\n",
    "    tf.random_normal([784, n_nodes_hl1])),'biases':\\\n",
    "                      tf.Variable(tf.random_normal([n_nodes_hl1]))}\n",
    "    hidden_2_layer = {'weights':tf.Variable(\\\n",
    "    tf.random_normal([n_nodes_hl1, n_nodes_hl2])),'biases':\\\n",
    "                      tf.Variable(tf.random_normal([n_nodes_hl2]))}\n",
    "    hidden_3_layer = {'weights':tf.Variable(\\\n",
    "    tf.random_normal([n_nodes_hl2, n_nodes_hl3])),'biases':\\\n",
    "                      tf.Variable(tf.random_normal([n_nodes_hl3]))}\n",
    "    output_layer = {'weights':tf.Variable(\\\n",
    "    tf.random_normal([n_nodes_hl3, n_classes])),'biases':\\\n",
    "                      tf.Variable(tf.random_normal([n_classes]))}\n",
    "    \n",
    "    # (input_data * weights) + bias, if no input_data allows for activation\n",
    "    l1 = tf.add(\\\n",
    "         tf.matmul(data,hidden_1_layer['weights'])\\\n",
    "         ,hidden_1_layer['biases'])\n",
    "    #threshold/activation function\n",
    "    l1 = tf.nn.relu(l1)\n",
    "   \n",
    "\n",
    "    l2 = tf.add(\\\n",
    "         tf.matmul(l1,hidden_2_layer['weights'])\\\n",
    "         ,hidden_2_layer['biases'])\n",
    "    l2 = tf.nn.relu(l2)\n",
    "    \n",
    "    \n",
    "    l3 = tf.add(\\\n",
    "         tf.matmul(l2,hidden_3_layer['weights'])\\\n",
    "         ,hidden_3_layer['biases'])\n",
    "    l3 = tf.nn.relu(l3)\n",
    "    \n",
    "    output = tf.add(\\\n",
    "         tf.matmul(l3,output_layer['weights'])\\\n",
    "         ,output_layer['biases'])\n",
    "    \n",
    "    return output\n",
    "\n",
    "def train_neural_network(x):\n",
    "    prediction = neural_network_model(x)\n",
    "    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = prediction,labels = y))\n",
    "    #minimizing cost\n",
    "    optimizer = tf.train.AdamOptimizer().minimize(cost)\n",
    "    #cycles of feed forwad and backprop\n",
    "    num_epochs = 20\n",
    "    \n",
    "    with tf.Session() as sess:\n",
    "        sess.run(tf.initialize_all_variables())\n",
    "      #training  \n",
    "        for epoch in range(num_epochs):\n",
    "            epoch_loss = 0 \n",
    "            for _ in range(int(mnist.train.num_examples/batch_size)):\n",
    "                epoch_x, epoch_y = mnist.train.next_batch(batch_size)\n",
    "                _, c = sess.run([optimizer,cost], feed_dict={x: epoch_x, y: epoch_y})\n",
    "                epoch_loss += c\n",
    "            print('Epoch', epoch, 'completed out of', num_epochs, 'loss', epoch_loss)\n",
    "        \n",
    "        #tf.argmax returns the index of the highest value,     \n",
    "       \n",
    "    \n",
    "        correct = tf.equal(tf.argmax(prediction,1), tf.argmax(y,1))\n",
    "        accuracy  = tf.reduce_mean(tf.cast(correct, 'float'))\n",
    "        print('Accuracy:', accuracy.eval({x:mnist.test.images, y:mnist.test.labels}))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
